
buildscript {
  repositories {
    mavenLocal()
    if (project.hasProperty('mavenContextUrl'))
      maven {
        url "${mavenContextUrl}/${mavenRepoKey}"
        credentials {
          username(mavenUser as String)
          password(mavenToken as String)
        }
      }
    gradlePluginPortal()
    maven { url 'https://dl.bintray.com/brambolt/public' }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath "com.brambolt.wrench:brambolt-wrench-properties-sample:${bramboltVersion}"
  }
}

plugins {
  id 'groovy'
  id 'java-library'
  id 'maven-publish'
  id 'com.brambolt.gradle.staging' apply false
}

description = 'Properties sample.'
group = 'com.brambolt.wrench'
version = bramboltVersion

apply plugin: 'com.brambolt.gradle.staging'

import com.brambolt.wrench.InstanceProperties

ext {
  sampleProperties = InstanceProperties.getFor(
    'some.example.system', project.projectDir)
}

velocity {
  strict = true
}

stage {
  includeAllResources = true
}

staging {
  targets(sampleProperties.getTargets())
}

task local(dependsOn: publishToMavenLocal)

task all(dependsOn: local) {
  doLast {
    ['local', 'remote'].each { String targetName ->
      File checkDir = new File(buildDir, "tmp/check/${targetName}")
      copy {
        from zipTree(new File(buildDir, "libs/${project.name}-${version}-${targetName}.zip"))
        into checkDir
      }
      ['target-agnostic.txt', 'target-specific.properties'].each {
        File file = new File(checkDir, it)
        if (!file.exists())
          throw new GradleException("Not found: ${file}")
      }
    }
  }
}